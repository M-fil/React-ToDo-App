{"version":3,"sources":["components/lib/images/image1.jpg","components/lib/images/image2.jfif","components/lib/images/image3.jpg","components/lib/images/image4.jpg","components/lib/images/image5.jpg","components/lib/images/image6.jpg","serviceWorker.js","redux/tasks_types/tasksTypesActions.js","redux/tasks_types/tasksTypesTypes.js","components/task/Checkbox.js","components/task/TaskItem.js","components/sorting/DeadlineSortButton.js","components/tasks-container/Square.js","components/tasks-container/SquaresContainer.js","components/tasks-container/CommonListContainer.js","components/tasks-container/ToDoList.js","components/app-theme/ThemeChangeWindow.js","components/app-theme/ToggleThemeButton.js","components/task-form/ToDoForm.js","components/task-form/ToggleFormButton.js","components/task-form/LeftSideBlock.js","components/app-view/SwitchTasksListView.js","components/footer/Footer.js","components/lib/themes.js","components/lib/images.js","components/app/App.js","components/sorting/functions.js","redux/tasks_types/tasksTypesReducer.js","redux/store.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","combineTasks","type","sortTasks","isDesc","importance","payload","connect","toggleTask","id","task","theme","useContext","ThemeContext","themeColor","color","borderColor","className","data-testid","style","checked","onChange","border","deleteTask","data-imporatnce","opacity","borderBottom","textDecoration","text","onClick","name","deadline","DeadlineSortButton","sort","array","isDescSort","position","themeBackgroundColor","backgroundColor","title","length","transform","square","squareNumber","useState","setIsDescSort","map","item","key","state","tasks1","tasks2","tasks3","tasks4","CommonListContainer","commonList","textAlign","ToDoList","withSquares","ColorItem","chooseTheme","data-color","ImageItem","imagePath","changeBackground","src","alt","ThemeChangeWindow","image1","image2","image3","image4","image5","image6","deleteBackgroundImage","ToggleThemeButton","showThemeChangeBlock","isSelected","isShown","initialState","reducer","action","addTask","shortid","generate","textRef","useRef","deadlineRef","useReducer","dispatch","onSubmit","event","preventDefault","current","value","ref","target","required","autoComplete","min","now","Date","year","getFullYear","month","String","getMonth","date","getDate","setMinDate","ToggleFormButton","showTaskForm","isFormShown","LeftSideBlock","setIsFormShown","borderRight","SwitchTasksListView","changeListView","htmlFor","Icon","link","iconType","href","rel","Footer","themes","dark","light","red","orange","yellow","purple","pink","blue","skyblue","brown","images","createContext","mapDispatch","setWithSquares","setIsShown","typeOfTheme","setTypeOfTheme","backgroundImage","setBackgroundImage","useEffect","document","body","Provider","dataset","sortSample","a","b","toLocaleString","tasksTypesReducer","filter","elem","returnUpdatedTasks","tasks","store","createStore","composeWithDevTools","applyMiddleware","logger","ReactDOM","render","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29e115fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image1.f546d571.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image2.a002c794.jfif\";","module.exports = __webpack_public_path__ + \"static/media/image3.ad2ad4ae.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image4.5a722c82.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image5.98911106.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image6.82eb2e46.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \r\n    ADD_TASK, \r\n    DELETE_TASK, \r\n    TOGGLE_TASK, \r\n    COMBINE_TASKS ,\r\n    SORT_TASKS\r\n} from './tasksTypesTypes';\r\nimport shortid from 'shortid';\r\n\r\nconst addTask = (text, deadline, importance) => {\r\n    return {\r\n        type: ADD_TASK,\r\n        payload: {\r\n            id: shortid.generate(),\r\n            text,\r\n            deadline,\r\n            importance,\r\n            checked: false,\r\n        }\r\n    }\r\n}\r\n\r\nconst deleteTask = (id, importance) => {\r\n    return {\r\n        type: DELETE_TASK,\r\n        payload: { id, importance },\r\n    }\r\n}\r\n\r\nconst toggleTask = (id, importance) => {\r\n    return {\r\n        type: TOGGLE_TASK,\r\n        payload: { id, importance }\r\n    }\r\n}\r\n\r\nconst combineTasks = () => {\r\n    return {\r\n        type: COMBINE_TASKS,\r\n    }\r\n}\r\n\r\nconst sortTasks = (isDesc, importance = '') => {\r\n    return {\r\n        type: SORT_TASKS,\r\n        payload: { isDesc, importance },\r\n    }\r\n}\r\n\r\nexport { addTask, deleteTask, toggleTask, combineTasks, sortTasks };","const ADD_TASK = 'ADD_TASK';\r\nconst DELETE_TASK = 'DELETE_TASK';\r\nconst TOGGLE_TASK = 'TOGGLE_TASK'; \r\nconst COMBINE_TASKS = 'COMBINE_TASKS';\r\n\r\nconst SORT_TASKS = 'SORT_TASKS'; \r\n\r\nexport { \r\n    ADD_TASK, \r\n    DELETE_TASK,\r\n    TOGGLE_TASK,\r\n    COMBINE_TASKS,\r\n    SORT_TASKS,\r\n};\r\n","import React, { useContext } from 'react';\r\n\r\nimport \"./checkbox.css\";\r\nimport { ThemeContext } from \"../app/App\";\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport { toggleTask, combineTasks } from '../../redux/tasks_types/tasksTypesActions';\r\n\r\nfunction Checkbox({ toggleTask, combineTasks, task }) {\r\n    const theme = useContext(ThemeContext);\r\n    const themeColor = theme.color;\r\n    const borderColor = \"1px solid \" + theme.borderColor;\r\n\r\n    const completeTask = () => {\r\n        toggleTask(task.id, task.importance);\r\n        combineTasks();\r\n    }\r\n\r\n    return (\r\n        <label className = \"checkbox-container\">\r\n            <input \r\n                className = 'checkbox'\r\n                data-testid='checkbox'\r\n                type = \"checkbox\" \r\n                style = {{color: themeColor}}\r\n                checked = {task.checked}\r\n                onChange = {completeTask}\r\n            />\r\n            <span \r\n                className = 'fake'\r\n                data-testid='fake'\r\n                style = {{border: borderColor}}\r\n            >\r\n            </span>\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default connect(null, { toggleTask, combineTasks })(Checkbox);\r\n","import React, { useContext } from 'react'\r\nimport Checkbox from \"./Checkbox\";\r\nimport { ThemeContext } from \"../app/App\";\r\nimport \"./task-item.css\";\r\n\r\nimport FontAwesome from 'react-fontawesome';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport { deleteTask } from '../../redux/tasks_types/tasksTypesActions';\r\n\r\nfunction TaskItem({ deleteTask, task }) {\r\n    const theme = useContext(ThemeContext);\r\n    const themeColor = theme.color;\r\n    const borderColor = \"1px solid \" + theme.borderColor;\r\n\r\n    return (\r\n        <li \r\n            className = \"task-container\"\r\n            data-testid='task' \r\n            id = {task.id}\r\n            data-imporatnce={task.importance}\r\n            style = {{\r\n                opacity: task.checked ? 0.5 : 1,\r\n                borderBottom: borderColor,\r\n            }}\r\n        >\r\n            <div className = \"task-container-upper\">   \r\n                <Checkbox task = {task}/>\r\n\r\n                <span \r\n                    className = \"task-text\" \r\n                    data-testid='text'\r\n                    style = {{\r\n                        color: themeColor,\r\n                        textDecoration: task.checked ? \"line-through\" : \"none\",\r\n                    }}\r\n                > \r\n                    {task.text}\r\n                </span>\r\n\r\n                <button \r\n                    className = \"delete-button\"\r\n                    data-testid='delete-button'\r\n                    style = {{border: themeColor}} \r\n                    onClick = {() => deleteTask(task.id, task.importance)}\r\n                >\r\n                    <FontAwesome \r\n                        className = \"icon\"\r\n                        name=\"trash\"\r\n                        style = {{color: themeColor}} \r\n                    />\r\n                </button>\r\n            </div>\r\n        \r\n            <span \r\n                className = \"deadline\" \r\n                data-testid='deadline'\r\n                style = {{color: themeColor}}\r\n            > \r\n                <FontAwesome \r\n                    className = \"icon calendar\"\r\n                    name=\"calendar\"\r\n                    style = {{color: themeColor}}\r\n                />\r\n                 {task.deadline} \r\n            </span>\r\n        </li>)\r\n}\r\n\r\nexport default connect(null, { deleteTask })(TaskItem);\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from \"../app/App\";\r\nimport \"./sort-button.css\";\r\n\r\nfunction DeadlineSortButton({ sort, array, isDescSort, position }) {\r\n    const theme = useContext(ThemeContext);\r\n    const themeColor = theme.color;\r\n    const themeBackgroundColor = `${theme.backgroundColor}`;\r\n    const borderColor = \"1px solid \" + theme.borderColor;\r\n\r\n    return (\r\n        <button \r\n            className=\"deadline-sort-button\"\r\n            data-testid = \"sort\" \r\n            type=\"button\" \r\n            onClick = {sort}\r\n            title = \"deadline sort\"\r\n            style = {{\r\n                backgroundColor: themeBackgroundColor,\r\n                color: themeColor,\r\n                border: borderColor,\r\n                opacity: array.length > 1 ? 1 : 0.6,\r\n                transform: isDescSort && array.length > 1 ? \"rotate(180deg)\" : \"rotate(360deg)\",\r\n                position: position,\r\n            }}\r\n        >\r\n            {array.length > 1 ? \"↑\" : \"sort\"}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default DeadlineSortButton;\r\n","import React, { useContext, useState } from 'react';\r\n\r\nimport \"./square.css\"\r\n\r\nimport { ThemeContext } from \"../app/App\";\r\nimport TaskItem from \"../task/TaskItem\";\r\nimport DeadlineSortButton from \"../sorting/DeadlineSortButton\";\r\n\r\nimport { connect } from 'react-redux';\r\nimport { sortTasks } from '../../redux/tasks_types/tasksTypesActions';\r\n\r\nfunction Square({ square, squareNumber, sortTasks }) {    \r\n    const theme = useContext(ThemeContext);\r\n    const themeColor = theme.color;\r\n    const themeBackgroundColor = theme.backgroundColor;\r\n    const borderColor = \"1px solid \" + theme.borderColor;\r\n\r\n    const [isDescSort, setIsDescSort] = useState(false);\r\n    const sortByDeadline = () => {\r\n      setIsDescSort(!isDescSort);\r\n      sortTasks(isDescSort, squareNumber)\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className='square'\r\n            data-testid='square'\r\n            style = {{\r\n              backgroundColor: themeBackgroundColor,\r\n              border: borderColor,\r\n            }}\r\n        >\r\n            <DeadlineSortButton \r\n                array = {square} \r\n                sort = {sortByDeadline} \r\n                isDescSort = {isDescSort}\r\n                position = \"absolute\"\r\n            />\r\n\r\n            <h3 style = {{color: themeColor}}> {squareNumber} </h3>\r\n            <ul className = \"list\"> \r\n                {square.map((item) => {\r\n                    return <TaskItem \r\n                                key = {item.id}\r\n                                id = {item.id}\r\n                                task = {item} \r\n                            />\r\n                })} \r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(null, { sortTasks })(Square);\r\n","import React from \"react\";\r\nimport \"./to-do-list.css\";\r\nimport Square from \"./Square\";\r\nimport { connect } from 'react-redux';\r\n\r\nfunction SquaresContainer ({ tasks1, tasks2, tasks3, tasks4 }) {\r\n    return (\r\n        <div id=\"main\">\r\n            <Square \r\n                square = {tasks1} \r\n                squareNumber = \"I - Urgent\" \r\n            />\r\n            <Square \r\n                square = {tasks2} \r\n                squareNumber = \"II - Important\"\r\n            />\r\n            <Square \r\n                square = {tasks3} \r\n                squareNumber = \"III - For Later\"\r\n            />\r\n            <Square \r\n                square = {tasks4} \r\n                squareNumber = \"IV - Delegate to Another\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapState = (state) => {\r\n    return {\r\n        ...state,\r\n        tasks1: state.tasks1,\r\n        tasks2: state.tasks2,\r\n        tasks3: state.tasks3,\r\n        tasks4: state.tasks4,\r\n    }\r\n}\r\n\r\nexport default connect(mapState)(SquaresContainer);","import React, { useContext } from \"react\";\r\nimport \"./to-do-list.css\";\r\nimport TaskItem from \"../task/TaskItem\";\r\nimport { ThemeContext } from \"../app/App\";\r\n\r\nfunction CommonListContainer ({ commonList }) {\r\n    const theme = useContext(ThemeContext);\r\n    const themeColor = theme.color;\r\n    const themeBackgroundColor = `${theme.backgroundColor}`;\r\n    const borderColor = \"1px solid \" + theme.borderColor;\r\n\r\n    return (\r\n        <div \r\n            className=\"common-tasks-list-container\"\r\n            style = {{\r\n                backgroundColor: themeBackgroundColor,\r\n                border: borderColor,\r\n                textAlign: commonList.length === 0 ? \"center\" : \"left\",\r\n            }}\r\n        >\r\n            {\r\n                commonList.length === 0 \r\n                ? \r\n                <span style = {{color: themeColor}}>\r\n                    No any tasks.\r\n                </span>\r\n                :\r\n                <ul>\r\n                    {\r\n                        commonList.map((item) => {\r\n                            return (\r\n                                <TaskItem \r\n                                    key = {item.id}\r\n                                    id = {item.id}\r\n                                    task = {item} \r\n                                />\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n            }   \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CommonListContainer;","import React from \"react\";\r\n\r\nimport \"./to-do-list.css\";\r\n\r\nimport SquaresContainer from './SquaresContainer';\r\nimport CommonListContainer from './CommonListContainer';\r\n\r\nfunction ToDoList ({ withSquares, commonList }) {\r\n    return (\r\n        <div data-testid='todo-list'>\r\n            {\r\n                withSquares \r\n                    ? <SquaresContainer /> \r\n                    : <CommonListContainer commonList={commonList} />\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDoList;","import React from 'react';\r\nimport \"./theme-colors.css\";\r\n\r\nexport function ColorItem ({ color, chooseTheme }) {   \r\n    return (\r\n        <li \r\n            className = {\"list-item \" + color} \r\n            data-color = {color}\r\n            onClick = {chooseTheme}\r\n        ></li>\r\n    )\r\n}\r\n\r\nexport function ImageItem ({ imagePath, changeBackground }) {\r\n    return (\r\n        <li className = \"item\">\r\n            <img src = {imagePath} onClick = {changeBackground} alt = \"\" />\r\n        </li>\r\n    );\r\n}\r\n\r\nfunction ThemeChangeWindow({ chooseTheme, image1, image2, image3, image4, image5, image6, changeBackground, deleteBackgroundImage }) {\r\n    return (\r\n        <div className = \"theme-change-window\" data-testid='theme-change-window'>\r\n            <h3>Background Colors</h3>\r\n            <ul className = \"list\">\r\n                <ColorItem color = \"dark\" chooseTheme = {chooseTheme} />\r\n                <ColorItem color = \"light\" chooseTheme = {chooseTheme} />\r\n                <ColorItem color = \"red\" chooseTheme = {chooseTheme} />\r\n                <ColorItem color = \"orange\" chooseTheme = {chooseTheme} />\r\n                <ColorItem color = \"yellow\" chooseTheme = {chooseTheme} />\r\n                <ColorItem color = \"purple\" chooseTheme = {chooseTheme} />\r\n                <ColorItem color = \"pink\" chooseTheme = {chooseTheme} />\r\n                <ColorItem color = \"blue\" chooseTheme = {chooseTheme} />\r\n                <ColorItem color = \"skyblue\" chooseTheme = {chooseTheme} />\r\n                <ColorItem color = \"brown\" chooseTheme = {chooseTheme} />\r\n            </ul>\r\n\r\n            <h3>Download an image</h3>\r\n            <ul className = \"list-of-images\">\r\n                <ImageItem \r\n                    imagePath = {image1}\r\n                    changeBackground = {changeBackground} \r\n                />\r\n                <ImageItem \r\n                    imagePath = {image2}\r\n                    changeBackground = {changeBackground} \r\n                />\r\n                <ImageItem \r\n                    imagePath = {image3}\r\n                    changeBackground = {changeBackground} \r\n                />\r\n                <ImageItem \r\n                    imagePath = {image4}\r\n                    changeBackground = {changeBackground} \r\n                />\r\n                <ImageItem \r\n                    imagePath = {image5}\r\n                    changeBackground = {changeBackground} \r\n                />\r\n                <ImageItem \r\n                    imagePath = {image6}\r\n                    changeBackground = {changeBackground} \r\n                />\r\n            </ul>\r\n\r\n            <button \r\n                className = \"simple-button radius\"\r\n                type = \"button\"  \r\n                onClick = {deleteBackgroundImage}\r\n            >\r\n                Delete Background Image\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ThemeChangeWindow;\r\n","import React, { useContext }  from 'react'\r\nimport { ThemeContext } from \"../app/App\";\r\nimport ThemeChangeWindow from \"./ThemeChangeWindow\";\r\n\r\nfunction ToggleThemeButton({ showThemeChangeBlock, isSelected, isShown, chooseTheme, image1, image2, image3, image4, image5, image6, changeBackground, deleteBackgroundImage }) {\r\n    const theme = useContext(ThemeContext);\r\n    const themeColor = theme.color;\r\n    const themeBackgroundColor = theme.backgroundColor;\r\n    const borderColor = \"1px solid \" + theme.borderColor;\r\n\r\n    return (\r\n        <div className = \"change-theme-container\">\r\n            <button \r\n                className = \"simple-button radius\"\r\n                data-testid='change-theme-button' \r\n                type = \"button\" \r\n                onClick = {showThemeChangeBlock}\r\n                style = {{\r\n                    backgroundColor: themeBackgroundColor,\r\n                    color: themeColor,\r\n                    border: borderColor,\r\n                }}\r\n            >\r\n                Change Theme\r\n            </button>\r\n\r\n            {\r\n                isShown \r\n                    ? <ThemeChangeWindow \r\n                        chooseTheme = {chooseTheme} \r\n                        isSelected = {isSelected}\r\n                        changeBackground = {changeBackground}\r\n                        deleteBackgroundImage = {deleteBackgroundImage}\r\n                        \r\n                        image1 = {image1}\r\n                        image2 = {image2}\r\n                        image3 = {image3}\r\n                        image4 = {image4}\r\n                        image5 = {image5}\r\n                        image6 = {image6}\r\n                        />\r\n                    : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToggleThemeButton;\r\n","import React, { useContext, useReducer, useRef } from \"react\";\r\n\r\nimport { ThemeContext } from \"../app/App\";\r\nimport \"./task-form.css\";\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport { addTask, combineTasks } from '../../redux/tasks_types/tasksTypesActions';\r\n\r\nconst initialState = {\r\n    text: '',\r\n    deadline: '',\r\n    importance: 'I - Urgent Task',\r\n}\r\n\r\nconst reducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'TEXT': return {\r\n            ...state,\r\n            text: action.payload,\r\n        }\r\n\r\n        case 'DEADLINE': return {\r\n            ...state,\r\n            deadline: action.payload,\r\n        }\r\n\r\n        case 'IMPORTANCE': return {\r\n            ...state,\r\n            importance: action.payload,\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nfunction ToDoForm ({ addTask, combineTasks, withSquares }) {\r\n    const textRef = useRef();\r\n    const deadlineRef = useRef();\r\n\r\n    const theme = useContext(ThemeContext);\r\n\r\n    const themeColor = theme.color;\r\n    const themeBackgroundColor = theme.backgroundColor;\r\n    const borderColor = \"1px solid \" + theme.borderColor;\r\n    \r\n    let setMinDate = () => {\r\n        let now = new Date();\r\n        let year = now.getFullYear();\r\n        let month = String(now.getMonth()).length === 1 ? '0' + (now.getMonth() + 1) : now.getMonth() + 1;\r\n        let date = String(now.getDate()).length === 1 ? '0' + now.getDate() : now.getDate();\r\n\r\n        let result = `${year}-${month}-${date}`;\r\n\r\n        return result;\r\n    }\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    const addNewTask = (event) => {\r\n        event.preventDefault();\r\n        addTask(state.text, state.deadline, state.importance);\r\n\r\n        textRef.current.value = '';\r\n        deadlineRef.current.value = '';\r\n        combineTasks()\r\n    }\r\n\r\n    return (\r\n        <form \r\n            data-testid='todo-form'\r\n            onSubmit = {addNewTask} \r\n            id = \"create-task-form\" \r\n        >\r\n            <label className='label-container' style = {{color: themeColor}}>\r\n                <span className='text'>Add Task:</span>\r\n                <input \r\n                    className='field'\r\n                    type = \"text\" \r\n                    name = \"text\"\r\n\r\n                    ref = {textRef}\r\n                    onChange = {(event) => dispatch({ type: 'TEXT', payload: event.target.value })}\r\n                    style = {{color: themeColor, borderBottom: borderColor}}\r\n\r\n                    required \r\n                    autoComplete = \"off\"\r\n                />\r\n            </label>\r\n\r\n            <label className='label-container' style = {{color: themeColor}}>\r\n                <span className='text'>Add Deadline:</span>\r\n                <input\r\n                    className='field' \r\n                    type = \"date\" \r\n                    name = \"deadline\"\r\n\r\n                    ref = {deadlineRef}\r\n                    onChange = {(event) => dispatch({ type: 'DEADLINE', payload: event.target.value })}\r\n                    style = {{color: themeColor, borderBottom: borderColor}}\r\n                    min = {setMinDate()}\r\n\r\n                    required \r\n                    autoComplete = \"off\"\r\n                />\r\n            </label>\r\n\r\n            {\r\n                withSquares ? \r\n                    <>\r\n                        <label className='label-container' style = {{color: themeColor}}>\r\n                            <span className='text'>Add Task Importance:</span> \r\n                            <select \r\n                                className='field'\r\n                                name = \"importance\"\r\n            \r\n                                onChange = {(event) => dispatch({ type: 'IMPORTANCE', payload: event.target.value })}\r\n                                style = {{color: themeColor, borderBottom: borderColor}} \r\n                            >\r\n                                <option value = \"I - Urgent\">I - Urgent</option>\r\n                                <option value = \"II - Important\">II - Important</option>\r\n                                <option value = \"III - For Later\">III - For Later</option>\r\n                                <option value = \"IV - Delegate to Another\">IV - Delegate to Another</option>\r\n                            </select>\r\n                        </label>\r\n                    </>\r\n                : null\r\n            }\r\n\r\n            <button \r\n                type = \"submit\"\r\n                className = \"simple-button radius add-task-button\" \r\n                title = {withSquares ? \"After switching to the view with Blocks all tasks will be saved in one block\" : null}\r\n\r\n                style = {{\r\n                    border: borderColor,\r\n                    backgroundColor: themeBackgroundColor,\r\n                    color: themeColor,\r\n                }}\r\n            >\r\n                Add Task\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default connect(null, { addTask, combineTasks })(ToDoForm);","import React, { useContext } from 'react';\r\nimport FontAwesome from 'react-fontawesome';\r\nimport { ThemeContext } from \"../app/App\";\r\n\r\nfunction ToggleFormButton({ showTaskForm, isFormShown }) {\r\n    const theme = useContext(ThemeContext);\r\n    const themeColor = theme.color;\r\n    const themeBackgroundColor = theme.backgroundColor;\r\n    \r\n    return (\r\n        <button \r\n            className = \"close-button\"\r\n            type = \"button\"\r\n            onClick = {showTaskForm}\r\n            style = {{\r\n                backgroundColor: themeBackgroundColor,\r\n                color: themeColor,\r\n            }}\r\n        >\r\n            { isFormShown \r\n                ? \r\n                <>\r\n                    <span>Close</span>     \r\n                    <FontAwesome name='sort-up' />\r\n                </>\r\n                : \r\n                <>\r\n                    <span>Open</span>\r\n                    <FontAwesome name='sort-down' />\r\n                </>\r\n            }\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default ToggleFormButton;\r\n","import React, { useContext, useState } from 'react';\r\nimport { ThemeContext } from \"../app/App\";\r\n\r\nimport ToDoForm from './ToDoForm';\r\nimport ToggleFormButton from './ToggleFormButton';\r\n\r\nfunction LeftSideBlock({ withSquares }) {\r\n    const theme = useContext(ThemeContext);\r\n    const themeColor = theme.color;\r\n    const themeBackgroundColor = theme.backgroundColor;\r\n    const borderColor = \"1px solid \" + theme.borderColor;\r\n\r\n    const [isFormShown, setIsFormShown] = useState(true);\r\n    const showTaskForm = () => setIsFormShown(!isFormShown);\r\n\r\n    return (\r\n        <div \r\n            data-testid='left-side-block'\r\n            id = \"left-side\" \r\n            style = {{\r\n                backgroundColor: themeBackgroundColor,\r\n                borderRight: borderColor,\r\n                borderBottom: borderColor,\r\n            }}          \r\n        >\r\n\r\n            <ToggleFormButton \r\n                showTaskForm={showTaskForm} \r\n                isFormShown={isFormShown} \r\n            />\r\n            \r\n            <h2 id = \"todo-title\" style = {{color: themeColor}}>\r\n                ToDo App\r\n            </h2>\r\n\r\n            { isFormShown ? <ToDoForm withSquares = {withSquares} /> : null }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LeftSideBlock;\r\n","import React, { useContext } from 'react';\r\nimport \"./switcher.css\";\r\nimport { ThemeContext } from \"../app/App\";\r\n\r\nfunction SwitchTasksListView({ changeListView }) {\r\n    const theme = useContext(ThemeContext);\r\n    const themeColor = theme.color;\r\n    const themeBackgroundColor = theme.backgroundColor;\r\n    const borderColor = \"1px solid \" + theme.borderColor;\r\n\r\n    return (\r\n        <div \r\n            className=\"switcher-container\"\r\n            data-testid='switcher'\r\n            style = {{\r\n                backgroundColor: themeBackgroundColor,\r\n                border: borderColor,\r\n            }}\r\n        >\r\n            <input \r\n                className = \"switcher\"\r\n                id='switcher'\r\n                type = \"checkbox\"  \r\n                onChange = {changeListView} \r\n            />\r\n            <label \r\n                className=\"text\"\r\n                htmlFor=\"switcher\" \r\n                style = {{color: themeColor}}\r\n            >\r\n                Change View\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SwitchTasksListView;","import React from 'react';\r\nimport \"./social-colors.css\";\r\nimport \"./footer.css\";\r\n\r\nimport FontAwesome from 'react-fontawesome';\r\n\r\nfunction Icon({ name, link, iconType }) {\r\n    return (\r\n        <div className=\"icon-box\" >\r\n            <a href={link} target=\"_blank\" rel=\"noopener noreferrer\" className={`fa-stack fa-2x color-${iconType}`}>\r\n                <FontAwesome name=\"circle fa-stack-2x\" />\r\n                <FontAwesome name={`${name} fa-stack-1x fa-inverse`} />\r\n            </a>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Footer() {\r\n    return (    \r\n        <footer className=\"social-wrapper\" data-testid='footer'>\r\n            <div className = \"social-wrapper-container\">\r\n                <Icon name='vk' link='https://vk.com/id327021520' iconType='vk' />\r\n                <Icon name='telegram' link='https://t.me/Filan0vichMaxim' iconType='tg' />\r\n                <Icon name='twitter' link='https://twitter.com/8Z64Su3u8Rfe7gf' iconType='twitter' />\r\n                <Icon name='envelope' link='mailto:maxim_filanovich@mail.ru' iconType='mail' />\r\n                <Icon name='github' link='https://github.com/M-fil' iconType='github' />\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n","const themes = {\r\n    dark: {\r\n        color: \"#e8eaed\",\r\n        backgroundColor: \"rgb(40, 44, 52)\",\r\n        borderColor: \"#cbf0f8\",\r\n    },\r\n    light: {\r\n        color: \"rgb(40, 44, 52)\",\r\n        backgroundColor: \"#e8eaed\",\r\n        borderColor: \"rgb(40, 44, 52)\",\r\n    },\r\n    red: {\r\n        color: \"rgb(40, 44, 52)\",\r\n        backgroundColor: \"#f28b82\",\r\n        borderColor: \"rgb(40, 44, 52)\",\r\n    },\r\n    orange: {\r\n        color: \"rgb(40, 44, 52)\",\r\n        backgroundColor: \"#fbbc04\",\r\n        borderColor: \"rgb(40, 44, 52)\",\r\n    },\r\n    yellow: {\r\n        color: \"rgb(40, 44, 52)\",\r\n        backgroundColor: \"#fff475\",\r\n        borderColor: \"rgb(40, 44, 52)\",\r\n    },\r\n    purple: {\r\n        color: \"rgb(40, 44, 52)\",\r\n        backgroundColor: \"#d7aefb\",\r\n        borderColor: \"rgb(40, 44, 52)\",\r\n    },\r\n    pink: {\r\n        color: \"rgb(40, 44, 52)\",\r\n        backgroundColor: \"#fdcfe8\",\r\n        borderColor: \"rgb(40, 44, 52)\",\r\n    },\r\n    blue: {\r\n        color: \"rgb(40, 44, 52)\",\r\n        backgroundColor: \"#aecbfa\",\r\n        borderColor: \"rgb(40, 44, 52)\",\r\n    },\r\n    skyblue: {\r\n        color: \"rgb(40, 44, 52)\",\r\n        backgroundColor: \"#cbf0f8\",\r\n        borderColor: \"rgb(40, 44, 52)\",\r\n    },\r\n    brown: {\r\n        color: \"rgb(40, 44, 52)\",\r\n        backgroundColor: \"#e6c9a8\",\r\n        borderColor: \"rgb(40, 44, 52)\",\r\n    },\r\n}\r\n\r\nexport default themes;\r\n\r\n  ","import image1 from \"./images/image1.jpg\";\r\nimport image2 from \"./images/image2.jfif\";\r\nimport image3 from \"./images/image3.jpg\";\r\nimport image4 from \"./images/image4.jpg\";\r\nimport image5 from \"./images/image5.jpg\";\r\nimport image6 from \"./images/image6.jpg\";\r\n\r\nlet images = {\r\n  image1,\r\n  image2,\r\n  image3, \r\n  image4, \r\n  image5, \r\n  image6,\r\n} \r\n\r\nexport default images;","import React, { useState, createContext, useEffect } from 'react';\r\n\r\nimport ToDoList from '../tasks-container/ToDoList';\r\nimport ToggleThemeButton from \"../app-theme/ToggleThemeButton\";\r\nimport LeftSideBlock from \"../task-form/LeftSideBlock\";\r\nimport SwitchTasksListView from \"../app-view/SwitchTasksListView\";\r\nimport DeadlineSortButton from \"../sorting/DeadlineSortButton\";\r\nimport Footer from '../footer/Footer';\r\n\r\nimport themes from \"../lib/themes\";\r\nimport images from \"../lib/images\";\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport { sortTasks, combineTasks } from '../../redux/tasks_types/tasksTypesActions';\r\n\r\n\r\nexport const ThemeContext = createContext(themes.dark); \r\n\r\nfunction App ({ sortTasks, combineTasks, commonList }) {\r\n\r\n  const [withSquares, setWithSquares] = useState(true);\r\n  const [isShown, setIsShown] = useState(false);\r\n  const [typeOfTheme, setTypeOfTheme] = useState(themes.dark);\r\n\r\n  const showThemeChangeBlock = () => setIsShown(!isShown);\r\n  const chooseTheme = (event) => setTypeOfTheme(themes[`${event.target.dataset.color}`]);\r\n  const [backgroundImage, setBackgroundImage] = useState(images.image2);\r\n  const changeBackground = (event) => setBackgroundImage(event.target.src);\r\n  const deleteBackgroundImage = () => setBackgroundImage(\"\");\r\n\r\n  const changeListView = () => {\r\n      setWithSquares(!withSquares);\r\n      combineTasks();\r\n  }\r\n  \r\n  const [isDescSort, setIsDescSort] = useState(false);\r\n  const sortByDeadline = () => {\r\n    setIsDescSort(!isDescSort);\r\n    sortTasks(isDescSort, '')\r\n  }\r\n  \r\n  useEffect(() => {\r\n      document.body.style.backgroundImage = \"url('\" + backgroundImage + \"')\";\r\n      return () => document.body.style.backgroundImage = null;\r\n  }, [backgroundImage]);\r\n\r\n  useEffect(() => {\r\n    document.body.style.backgroundColor = typeOfTheme.backgroundColor;\r\n    return () => document.body.style.backgroundColor = null;\r\n  }, [typeOfTheme]);\r\n\r\n  const themeColor = typeOfTheme[\"color\"];\r\n  \r\n  return (\r\n    <div data-testid='app'>\r\n      <div className=\"root-container\">\r\n        <ThemeContext.Provider value = {typeOfTheme}>\r\n          <SwitchTasksListView \r\n            changeListView = {changeListView}\r\n          />\r\n\r\n          <LeftSideBlock withSquares={withSquares} />\r\n\r\n          <div id = \"squares\">\r\n            <ToggleThemeButton \r\n              showThemeChangeBlock = {showThemeChangeBlock} \r\n              isShown = {isShown}\r\n              chooseTheme = {chooseTheme}\r\n              changeBackground = {changeBackground}\r\n              deleteBackgroundImage = {deleteBackgroundImage}\r\n\r\n              image1 = {images.image1}\r\n              image2 = {images.image2}\r\n              image3 = {images.image3}\r\n              image4 = {images.image4}\r\n              image5 = {images.image5}\r\n              image6 = {images.image6}\r\n            />\r\n\r\n            <h1 \r\n              id = \"main-title\" \r\n              style = {{\r\n                color: themeColor,\r\n              }}\r\n            >\r\n              ToDo App\r\n              {\r\n                !withSquares ?            \r\n                  <DeadlineSortButton \r\n                    sort = {sortByDeadline}\r\n                    array = {commonList}\r\n                    isDescSort = {isDescSort}\r\n                    position = \"relative\"\r\n                  /> \r\n                : null\r\n              }\r\n            </h1>\r\n\r\n            <ToDoList \r\n              withSquares = {withSquares}\r\n              commonList = {commonList}\r\n            />\r\n          </div>\r\n        </ThemeContext.Provider>\r\n      </div>\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapState = (state) => {\r\n  return {\r\n    ...state,\r\n    commonList: state.commonList,\r\n  }\r\n}\r\n\r\nconst mapDispatch = {\r\n  sortTasks,\r\n  combineTasks,\r\n}\r\n\r\nexport default connect(mapState, mapDispatch)(App);\r\n","export const sortSample = (array, isDesc) => {\r\n    switch (isDesc) {\r\n        case false : return array.sort((a, b) => {\r\n            return new Date(a.deadline.toLocaleString()) - new Date(b.deadline.toLocaleString());\r\n        });\r\n\r\n        case true : return array.sort((a, b) => {\r\n                return new Date(b.deadline.toLocaleString()) - new Date(a.deadline.toLocaleString());\r\n        });\r\n\r\n        default: return array; \r\n    }\r\n}","import { \r\n    ADD_TASK, \r\n    DELETE_TASK, \r\n    TOGGLE_TASK, \r\n    COMBINE_TASKS,\r\n    SORT_TASKS\r\n} from './tasksTypesTypes';\r\nimport { sortSample } from '../../components/sorting/functions';\r\n\r\nconst initialState = {\r\n    tasks1: [],\r\n    tasks2: [],\r\n    tasks3: [],\r\n    tasks4: [],\r\n\r\n    commonList: []\r\n}\r\n\r\nconst tasksTypesReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case ADD_TASK: {\r\n            switch (action.payload.importance) {\r\n                case \"I - Urgent Task\" : return {\r\n                    ...state,\r\n                    tasks1: [ action.payload, ...state.tasks1 ],\r\n                }\r\n                case \"II - Important\" : return {\r\n                    ...state,\r\n                    tasks2: [ action.payload, ...state.tasks2 ],\r\n                }\r\n                case \"III - For Later\" : return {\r\n                    ...state,\r\n                    tasks3: [ action.payload, ...state.tasks3 ],\r\n                }\r\n                case \"IV - Delegate to Another\" : return {\r\n                    ...state,\r\n                    tasks4: [ action.payload, ...state.tasks4 ],\r\n                }\r\n                default : return state;\r\n            }\r\n        }\r\n\r\n        case DELETE_TASK: {\r\n            const { id, importance } = action.payload;\r\n\r\n            switch(importance) {\r\n                case \"I - Urgent Task\" : return {\r\n                    ...state,\r\n                    tasks1: [ ...state.tasks1.filter(elem => elem.id !== id) ],\r\n                }\r\n                case \"II - Important\" : return {\r\n                    ...state,\r\n                    tasks2: state.tasks2.filter(elem => elem.id !== id),\r\n                }\r\n                case \"III - For Later\" : return {\r\n                    ...state,\r\n                    tasks3: state.tasks3.filter(elem => elem.id !== id),\r\n                }\r\n                case \"IV - Delegate to Another\" : return {\r\n                    ...state,\r\n                    tasks4: state.tasks4.filter(elem => elem.id !== id),\r\n                }\r\n                default : return state;\r\n            }\r\n        }\r\n\r\n        case TOGGLE_TASK: {\r\n            const { id, importance } = action.payload;\r\n            const returnUpdatedTasks = (tasks) => {\r\n                return tasks.map(task => {\r\n                    return task.id === id \r\n                    ? {\r\n                        ...task,\r\n                        checked: !task.checked\r\n                    } \r\n                    : task;\r\n                });\r\n            }\r\n\r\n            switch(importance) {\r\n                case \"I - Urgent Task\" : {\r\n                    return {\r\n                        ...state,\r\n                        tasks1: returnUpdatedTasks(state.tasks1),\r\n                    }\r\n                }\r\n                case \"II - Important\" : {\r\n                    return {\r\n                        ...state,\r\n                        tasks2: returnUpdatedTasks(state.tasks2),\r\n                    }\r\n                }\r\n                case \"III - For Later\" : {\r\n                    return {\r\n                        ...state,\r\n                        tasks3: returnUpdatedTasks(state.tasks3),\r\n                    }\r\n                }\r\n                case \"IV - Delegate to Another\" : {\r\n                    return {\r\n                        ...state,\r\n                        tasks4: returnUpdatedTasks(state.tasks4),\r\n                    }\r\n                }\r\n                default : return state;\r\n            }\r\n        }\r\n\r\n        case COMBINE_TASKS: return {\r\n            ...state,\r\n            commonList: [\r\n                ...state.tasks1,\r\n                ...state.tasks2,\r\n                ...state.tasks3,\r\n                ...state.tasks4,\r\n            ],\r\n        }\r\n\r\n        case SORT_TASKS: {\r\n            const { isDesc, importance } = action.payload;\r\n\r\n            switch(importance) {\r\n                case 'I - Urgent' : return {\r\n                    ...state,\r\n                    tasks1: sortSample(state.tasks1, isDesc)\r\n                }\r\n                case \"II - Important\" : return {\r\n                    ...state,\r\n                    tasks1: sortSample(state.tasks2, isDesc)\r\n                }\r\n                case \"III - For Later\" : return {\r\n                    ...state,\r\n                    tasks1: sortSample(state.tasks3, isDesc)\r\n                }\r\n                case \"IV - Delegate to Another\" : return {\r\n                    ...state,\r\n                    tasks1: sortSample(state.tasks4, isDesc)\r\n                }\r\n                case '': return {\r\n                    ...state,\r\n                    commonList: sortSample(state.commonList, isDesc),\r\n                };\r\n                default: return state;\r\n            }\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default tasksTypesReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport logger from 'redux-logger';\r\n\r\nimport tasksTypesReducer from './tasks_types/tasksTypesReducer';\r\n\r\nconst store = createStore(tasksTypesReducer, composeWithDevTools(applyMiddleware(logger)));\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'font-awesome/css/font-awesome.css';\r\n\r\nimport App from \"./components/app/App\";\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, \r\n    document.querySelector(\"#root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}